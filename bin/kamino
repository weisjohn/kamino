#!/usr/bin/env node

// kamino - a node.js powered cli for cloning lots of repos from Git(Hub/Lab)

var commander = require('commander')
  , colors = require('colors')
  , fs = require('fs')
  , path = require('path')
  , url = require('url')
  , request = require('request')
  , async = require('async')
  , mkdirp = require('mkdirp')
  , spawn = require('child_process').spawn
  , pkg = require('../package')
  ;


// setup
commander.version(pkg.version)
    .option('-h, --host [IP || DNS]', 'The IP address or hostname for Gitlab')
    .option('-s, --secure', 'Use https instead')
    .option('-t, --token [token]', 'Your account\'s API token')
    .option('-d, --dir [dir]', 'The directory to clone projects into')
    .option('-v, --verbose', 'More logging')
    .parse(process.argv);


// unify commander options with config file options
var config = {
    host: commander.host,
    token: commander.token,
    dir: commander.dir
};
require('rc')(pkg.name, config);


// validation
["host","token","dir"].forEach(function(k) {
    if (!config[k]) {
        console.error((k + " is required").red);
        process.exit(1);
    }
});


// verify the `dir` exists
if (!fs.existsSync(path.resolve(config.dir))) {
    console.error((config.dir + " doesn't exist").red);
    process.exit(1);
}


// determine if we're going to *.github.com or somewhere else
var type = config.host.match(/github\.com/) ? "github" : "gitlab";

// resolve the url
if (type == "gitlab") {
    config.host = "http" + (config.secure ? "s" : "") + "://" + config.host + "/api/v3/";    
} else {
    config.host = "https://" + config.host;
}

var destination = url.parse(config.host);
if (!destination.host) {
    console.error(("`host` must be a domain: " + config.host).red);
    process.exit(1);
}


// setup request defaults
var req;
if (type == "gitlab") {
    req = request.defaults({ 
        qs : {
            "private_token" : config.token,
            "per_page" : 100
        }, 
        json : true 
    });
} else {
    req = request.defaults({
        "headers" : {
            "Accept" : "application/vnd.github.v3+json",
            "Authorization": "token " + config.token,
            "User-Agent": pkg.name + "/" + pkg.version + ", " + "node/" + process.version
        }, 
        qs: {
            "per_page" : 100
        }, 
        json : true
    });
}


// error handling
function handle(cb) {
    return function(err, response, json) {

        if (err && err.code === "ENOTFOUND") {
            console.error(('Couldn\'t find ' + type + '.').red);
        } else if (response.body && response.body.error) {
            console.error(response.body.error.red);
        } else {
            return cb(err || response, json);
        }

        process.exit(1);
    }
}


// find projects (we only get 100 at a time)
var projects = [], page = 1, refetch, successes = 0;
async.doWhilst(function(cb) {

    var url;
    if (type == "gitlab") {
        url = destination.resolve("projects?page=" + page)
    } else {
        url = destination.resolve('user/repos');
    }

    req.get(url, handle(function(err, p) {
        page++;
        refetch = p.length == 100;
        projects = projects.concat(p);
        cb();
    }));

}, function() {
    return refetch;
}, function() {
    console.log(("Found " + projects.length + " projects possible to clone.").green);
    cloneall(projects);
});


// clone all the projects
function cloneall(projects) {
    async.eachSeries(projects, clone, function(err, results) {
        if (err) {
            console.log('Failure while cloning'.red);
        } else {
            console.log(("Finished. " + successes + " repo" + (successes !== 1 ? "s" : "") + " successfully cloned").green);
        }
    });
};

// clone an individual project
function clone(project, callback) {

    async.waterfall([mk_namespace_dir(project), function(cb) {

        var project_path = type == "gitlab" ? project.path_with_namespace : project.full_name;

        var repo_dir = path.resolve(config.dir, project_path);

        // if that directory doesn't exist
        if (!fs.existsSync(repo_dir)) {

            // find the working directory
            var namespace_dir;
            if (type == "gitlab") {
                namespace_dir = project.namespace ? project.namespace.path : '';  
            } else {
                namespace_dir = project.full_name.split('/')[0];
            }
            var wd = path.resolve(config.dir, namespace_dir);

            // clone the project, pipe outputs
            var child = spawn("git", ['clone', project.ssh_url_to_repo || project.ssh_url ], { cwd : wd });
            if (config.verbose) {
                child.stderr.pipe(process.stderr);
                child.stdout.pipe(process.stdout);
            } else {
                console.log('Cloning', project.full_name || project.name_with_namespace);
            }
            child.on('exit', function(code) {
                if (code == null || code == 0) { successes++; }
                cb(code);
            });

        } else {
            if (config.verbose) console.warn((repo_dir + ' already exists').yellow);
            cb(null);
        }

    }], function(err, results) {
        callback(err, results);
    });

}


function mk_namespace_dir(project) {
    return function(cb) {
        var dir = type == "gitlab" ? project.namespace.path : project.full_name.split("/")[0]
        if (!dir) return cb("No directory path found for ", project.full_name || project.namespace);
        // if the namespace exists, make it there
        var dirpath = path.resolve(config.dir, dir);
        mkdirp(dirpath, function(err, made) {
            if (err) return cb('Failed to make directory: ' + dirpath);
            if (made) console.log(('Made directory: ' + dirpath).green);
            cb(null);
        });
    }
}
