#!/usr/bin/env node

// kamino - a node.js powered cli for cloning lots of repos from Gitlab

var commander = require('commander')
  , colors = require('colors')
  , fs = require('fs')
  , path = require('path')
  , url = require('url')
  , request = require('request')
  , async = require('async')
  , mkdirp = require('mkdirp')
  , spawn = require('child_process').spawn
  ;


// setup
commander.version('0.0.1')
    .option('-h, --host [IP || DNS]', 'The IP address or hostname for Gitlab')
    .option('-s, --secure', 'Use https instead')
    .option('-t, --token [token]', 'Your account\'s API token')
    .option('-d, --dir [dir]', 'The directory to clone projects into')
    .option('-v, --verbose', 'More logging')
    .parse(process.argv);


// validation
["host","token","dir"].forEach(function(k) {
    if (!commander[k]) {
        console.error((k + " is required").red);
        process.exit(1);
    }
});


// verify the `dir` exists
if (!fs.existsSync(path.resolve(commander.dir))) {
    console.error((commander.dir + " doesn't exist").red);
    process.exit(1);
}


// resolve the url
commander.host = "http" + (commander.secure ? "s" : "") + "://" + commander.host + "/api/v3/";
var gitlab = url.parse(commander.host);
if (!gitlab.host) {
    console.error("It appears that `host` is invalid".red);
    process.exit(1);
}


// setup request
var r = request.defaults({ qs : {
    "private_token" : commander.token,
    "per_page" : 100
}, json : true });


// error handling
function handle(cb) {
    return function(err, response, json) {

        if (err && err.code === "ENOTFOUND") {
            console.error('Couldn\'t find Gitlab.'.red);
        } else if (response.body && response.body.error) {
            console.error(response.body.error.red);
        } else {
            return cb(err || response, json);
        }

        process.exit(1);
    }
}


// find projects (we only get 100 at a time)
var projects = [], page = 1, refetch, successes = 0;
async.doWhilst(function(cb) {

    r.get(gitlab.resolve("projects?page=" + page), handle(function(err, p) {
        page++;
        refetch = p.length == 100;
        projects = projects.concat(p);
        cb();
    }));

}, function() {
    return refetch;
}, function() {
    console.log(("Found " + projects.length + " projects possible to clone.").green);
    cloneall(projects);
});


// clone all the projects
function cloneall(projects) {
    async.eachSeries(projects, clone, function(err, results) {
        if (err) {
            console.log('Failure while cloning'.red);
        } else {
            console.log(("Finished. " + successes + " repo" + (successes !== 1 ? "s" : "") + " successfully cloned").green);
        }
    });
};

// clone an individual project
function clone(project, callback) {

    async.waterfall([mk_namespace_dir(project), function(cb) {

        var repo_dir = path.resolve(commander.dir, project.path_with_namespace);

        // if that directory doesn't exist
        if (!fs.existsSync(repo_dir)) {

            // find the working directory
            var namespace_dir = project.namespace ? project.namespace.path : '';
            var wd = path.resolve(commander.dir, namespace_dir);

            // clone the project, pipe outputs
            var child = spawn("git", ['clone', project.ssh_url_to_repo ], { cwd : wd });
            if (commander.verbose) {
                child.stderr.pipe(process.stderr);
                child.stdout.pipe(process.stdout);
            } else {
                console.log('Cloning', project.name_with_namespace);
            }
            child.on('exit', function(code) {
                if (code == null || code == 0) { successes++; }
                cb(code);
            });

        } else {
            if (commander.verbose) console.warn((repo_dir + ' already exists').yellow);
            cb(null);
        }

    }], function(err, results) {
        callback(err, results);
    });

}


function mk_namespace_dir(project) {
    return function(cb) {
        // if the namespace exists, make it there
        if (project.namespace && project.namespace.path) {
            var dirpath = path.resolve(commander.dir, project.namespace.path);
            mkdirp(dirpath, function(err, made) {
                if (err) return cb('Failed to make directory: ' + dirpath);
                if (made) console.log(('Made directory: ' + dirpath).green);
                cb(null);
            });
        } else { cb(null); }
    }
}
